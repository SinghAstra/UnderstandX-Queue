generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id            String       @id @default(cuid())
  name          String?
  email         String       @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  accounts      Account[]
  repositories  Repository[]
  sessions      Session[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Repository {
  id          String           @id @default(cuid())
  name        String
  owner       String
  url         String
  userId      String
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  avatarUrl   String
  githubId    Int
  status      RepositoryStatus @default(PENDING)
  overview    String?
  logs        Log[]
  directories Directory[]
  files       File[]
  user        User             @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Directory {
  id           String      @id @default(cuid())
  path         String
  summary      String?
  repositoryId String
  parentId     String?
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  parent       Directory?  @relation("DirectoryTree", fields: [parentId], references: [id])
  children     Directory[] @relation("DirectoryTree")
  repository   Repository  @relation(fields: [repositoryId], references: [id], onDelete: Cascade)
  files        File[]
}

model File {
  id           String     @id @default(cuid())
  path         String
  name         String
  content      String?
  directoryId  String?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  repositoryId String
  analysis  String?
  shortSummary String?
  directory    Directory? @relation(fields: [directoryId], references: [id], onDelete: Cascade)
  repository   Repository @relation(fields: [repositoryId], references: [id], onDelete: Cascade)
}

model Log {
  id           String   @id @default(cuid())
  repositoryId String
  message      String
  repository   Repository @relation(fields: [repositoryId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
}


enum RepositoryStatus {
  PENDING
  PROCESSING
  SUCCESS
  FAILED
}

enum DirectoryStatus {
  PENDING
  PROCESSING
  SUCCESS
  FAILED
}

